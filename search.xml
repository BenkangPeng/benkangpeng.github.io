<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Customized Website Article Link</title>
    <url>/posts/4bc5178d/</url>
    <content><![CDATA[<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>In the default setting of Hexo and Next , my article ‘s usl is long and ugly ,  so I want to customize my article’s lick ,which is concise and static .  Fortunately , I finally find a hexo plugin called <code>hexo-abbrlink</code> , which is really amazing !   Here is the link :  <a href="https://github.com/rozbo/hexo-abbrlink">rozbo&#x2F;hexo-abbrlink: create one and only link for every post for hexo (github.com)</a></p>
<span id="more"></span>

<h3 id="Install-and-Configure-it"><a href="#Install-and-Configure-it" class="headerlink" title="Install and Configure it"></a>Install and Configure it</h3><ol>
<li><strong>Add plugin to Hexo :</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>Modify <code>config.yml</code></strong></li>
</ol>
<p><strong>Change the origin code</strong> </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure>

<p><strong>into</strong>(You can choose one of two ways below :)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br></pre></td></tr></table></figure>

<p><strong>or</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:addrlink.html</span></span><br></pre></td></tr></table></figure>

<p><strong style = "color = red ">Be careful : </strong> </p>
<p>There is a <code>/</code> in the end of <code>permalink: posts/:abbrlink/</code> ,  and not in <code>permalink: posts/:addrlink.html</code> !    This <code>/</code>  is really important .</p>
<ol start="3">
<li><strong>Add the codes below in the end of file <code>config.yml</code></strong></li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>        <span class="comment">#support dec(default) and hex</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">false</span>   <span class="comment">#(true)Process draft,(false)Do not process draft. false(default) </span></span><br><span class="line">  <span class="comment"># Generate categories from directory-tree</span></span><br><span class="line">  <span class="comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line">  <span class="attr">auto_category:</span></span><br><span class="line">     <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#true(default)</span></span><br><span class="line">     <span class="attr">depth:</span>        <span class="comment">#3(default)</span></span><br><span class="line">     <span class="attr">over_write:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">auto_title:</span> <span class="literal">false</span> <span class="comment">#enable auto title, it can auto fill the title by path</span></span><br><span class="line">  <span class="attr">auto_date:</span> <span class="literal">false</span> <span class="comment">#enable auto date, it can auto fill the date by time today</span></span><br><span class="line">  <span class="attr">force:</span> <span class="literal">false</span> <span class="comment">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.</span></span><br></pre></td></tr></table></figure>

<p>You can modifly the parameters <code>alg</code> and <code>rep</code> according to your preference , and their meaning is as follow :</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">alg</span> <span class="string">--</span> <span class="string">Algorithm</span> <span class="string">(currently</span> <span class="string">support</span> <span class="string">crc16</span> <span class="string">and</span> <span class="string">crc32,</span> <span class="string">which</span> <span class="string">crc16</span> <span class="string">is</span> <span class="string">default)</span></span><br><span class="line"><span class="string">rep</span> <span class="string">--</span> <span class="string">Represent</span> <span class="string">(the</span> <span class="string">generated</span> <span class="string">link</span> <span class="string">could</span> <span class="string">be</span> <span class="string">presented</span> <span class="string">in</span> <span class="string">hex</span> <span class="string">or</span> <span class="string">dec</span> <span class="string">value)</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>Final Nagging</strong></li>
</ol>
<ul>
<li>If  your article ‘s  URL  is still the style <code>:year/:month/:day/:title/</code> ,  you may forget to change <code>permalink: :year/:month/:day/:title/</code>  into  <code>permalink: posts/:abbrlink/</code>  or <code>permalink: posts/:addrlink.html</code>  .   Another reason may be <code>&quot;GitHub just can&#39;t response at once&quot;</code>  , so just wait for minutes patiently ~</li>
<li>Just don’t forget the <code>/</code> in the end of <code>permalink: posts/:abbrlink/</code></li>
</ul>
<p><del>Actually , I had fallen into two traps mentioned above .</del></p>
<ul>
<li><strong>That’s all .</strong></li>
</ul>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Collecting commonly used websites</title>
    <url>/posts/7c22bd6a/</url>
    <content><![CDATA[<p><strong style="color : orange">Some commonly used or valuable websites .</strong> </p>
<span id="more"></span>

<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg"></object>
<p>Hackway</p><p>计算机专业学习路线</p>
<a href="https://hackway.org/docs/cs/intro"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg"></object>
<p>cs-self-learning</p><p>CS自学指南</p>
<a href="https://csdiy.wiki"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg"></object>
<p>名校公开课程评价网</p><p>CS Courses</p>
<a href="https://conanhujinming.github.io/comments-for-awesome-courses/"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg"></object>
<p>CS公开课程学习群</p><p>一个QQ群</p>
<a href="https://zhuanlan.zhihu.com/p/253232863"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg"></object>
<p>编程指北</p><p>计算机学习路线</p>
<a href="https://csguide.cn/"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg"></object>
<p>Hello FakeGPT</p><p>ChatGPT加速器</p>
<a href="chat.zhille.io"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg"></object>
<p>Hello 算法</p><p>算法学习入门教程</p>
<a href="https://www.hello-algo.com/"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg"></object>
<p>Brian (Bojie) Li (01.me)</p><p>https://01.me/</p>
<a href="https://01.me/"></a>
</div></div>]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy your website</title>
    <url>/posts/f1f00c7b/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>我们在使用<a href="https://benkangpeng.gitee.io/2023/09/18/Hello%20Hexo-NEXT/">Hexo+NexT搭建</a>好个人博客后,只能在本地端口访问，其他人无法访问(有一种内网穿透的方法可以将电脑端口暴露，从而达到”上线“的功能。尚未了解    找到了:<a href="https://www.bilibili.com/video/BV1z14y1r7Fc/?spm_id_from=333.999.0.0&vd_source=da5120fea3f8bb8d2fe1984a02a9a745">Here</a>)。</p>
<p>我们可以使用<code>Github pages</code> 和<code>Gitee pages</code> 上线网站从而白嫖一台只能搭载<code>静态网页</code>的服务器  （<del>是不是有种白嫖的快乐</del>）以下是上线步骤。</p>
<span id="more"></span>

<h3 id="Github-pages"><a href="#Github-pages" class="headerlink" title="Github pages"></a>Github pages</h3><h4 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h4><ul>
<li><p><strong>注册GitHub、新建仓库</strong></p>
<p>新建一个仓库，注意仓库名一定是用户名与github.io的组合，例如<code>benkangpeng.github.io</code></p>
</li>
<li><p><strong>生成ssh-key</strong></p>
<p>如果未配置过git ，未获得<code>ssh key</code> 的话，需要配置<code>git</code>并获得<code>ssh key</code>(我理解为电脑硬件、邮箱对应的编码。通过该编码可以找到唯一的计算机，<code>GitHub</code>就是通过<code>ssh key</code>与计算机进行加密数据传输的。计算机网络没学 ，一定得补补:cry:)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;benkangpeng&quot;</span><br><span class="line">git config --global user.email &quot;benkangpeng@163.com&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;benkangpeng@163.com&quot;  # 之后三次回车</span><br></pre></td></tr></table></figure>

<p>根据终端输出的信息找到<code>id_rsa.pub</code>的位置,或者通过以下命令查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Connect computer with GitHub by ssh-key</strong></p>
<p><strong>将ssh-key加入到github上</strong>：点击<code>个人头像进入个人空间</code> → <code>SSH and GPG keys</code>→ <code>New SSH key </code>,Title随意(最好标明是哪台电脑），<code>Key</code>粘上刚才复制的<code>id_rsa.pub</code> ，添加成功后会收到Github的邮件。</p>
<p><strong>尝试本机与Github通信</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Hi BenkangPeng! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>若显示以上结果，则表明通信成功。</p>
</li>
<li><p>修改<code>Hexo</code> 配置文件</p>
<p><code>_config.yml </code>文件中找到<code>deploy</code>一项，修改为</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/benkangpeng/benkangpeng.github.io.git</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>type</code>表示<code>the type of site deploying</code> , 即网站发布的方式，我们通过<code>git</code>发布</p>
<p><code>repository</code>则填写之前建立的仓库的地址，后加上后缀<code>.git</code></p>
</li>
<li><p>安装<code>hexo部署插件</code>(最好在根目录安装插件)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">benkangpeng@DESKTOP-FR84659 MINGW64 /d/Hexo/blog (master)</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件上传到<code>Github</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g  # hexo generate</span><br><span class="line">hexo d  # hexo deploy</span><br></pre></td></tr></table></figure>

<p>此时相关文件已上传到对应的仓库中，但如果此时你输入<code>https:\\benkangpeng.github.io</code>结果是<code>404</code>，原因是未将该仓库设置为<code>GitHub pages</code> .</p>
<p>在仓库页面右边的侧边栏中有一个<code>设置</code>的齿轮图标，点击→勾选<code>Use your GitHub Pages website</code>→<code>Save Changes</code></p>
</li>
<li><p><strong>大功告成</strong>，输入<code>https:\\benkangpeng.github.io</code>查看网页吧！</p>
</li>
</ul>
<h3 id="Gitee-pages"><a href="#Gitee-pages" class="headerlink" title="Gitee pages"></a>Gitee pages</h3><p>因为Gitee pages的部署与Github类似(<del>毕竟抄来的</del>)，以下步骤较为简略，可参考着Github的配置步骤进行。</p>
<h4 id="主要步骤-1"><a href="#主要步骤-1" class="headerlink" title="主要步骤:"></a>主要步骤:</h4><ul>
<li><p><strong>Gitee注册账号</strong>并实名认证(对，就是这么狗:dog:)</p>
</li>
<li><p><strong>新建仓库</strong></p>
<p>此处一定要注意仓库名与用户名一致，例如我的是<code>benkangpeng</code>,与Github不同(GitHub是benkangpeng.github.io)</p>
</li>
<li><p><strong>Git全局设置、获取ssh-key</strong>(同上面的Github)</p>
<p>已经设置过全局设置、获取过ssh-key，则无需进行操作。重复操作会改变计算机的ssh-key，与之前在Github绑定的ssh-key不同了，导致Github与计算机无法通信。最优解：固定计算机的ssh-key不变，Github、Gitee共用一个。此后也不要变更ssh-key.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;benkangpeng&quot;</span><br><span class="line">git config --global user.email &quot;benkangpeng@163.com&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;benkangpeng@163.com&quot;  # 之后三次回车</span><br></pre></td></tr></table></figure>

<p>根据终端输出的信息找到<code>id_rsa.pub</code>的位置,或者通过以下命令查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>SSH-key填入Gitee</strong></p>
<p>点头像→设置→SSH公钥</p>
</li>
<li><p><strong>第一次通信</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Hi BenkangPeng(@benkangpeng)! You’ve successfully authenticated, but GITEE.COM does not provide shell access.</p>
</blockquote>
<p><del>咱也不懂<code>does not provide shell access</code>是啥意思，Gitee垃圾就完事了</del></p>
</li>
<li><p><strong>修改<code>hexo</code>  <code>_config.yml</code></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="comment">#repository: https://github.com/benkangpeng/benkangpeng.github.io.git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://gitee.com/benkangpeng/benkangpeng.git</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装hexo部署插件</strong>(安装过的无需重复安装)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>部署、上传到Gitee</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>此时可以看到相关文件已上传到Gitee仓库中。</p>
</li>
<li><p><strong>将仓库设置为Gitee Pages</strong></p>
<p>①进入仓库→上面的边框 <code>管理</code>→向下滑，勾选<code>开源</code>→<code>保存</code></p>
<p>②进入仓库→上面的边框 <code>服务</code>→<code>Gitee Pages</code> → 勾选<code>强制使用HTTPS</code>→<code>启动</code></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>HDLBits Solutions</title>
    <url>/posts/4ff0bc03/</url>
    <content><![CDATA[<h3>Abstract</h3>

<p>The solutions and my notes of <a href="[Problem sets - HDLBits (01xz.net)](https://hdlbits.01xz.net/wiki/Problem_sets)">HDLBits</a> are written in this document .</p>

<span id="more"></span>

<p>[TOC]</p>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><h3 id="Getting-Started-1"><a href="#Getting-Started-1" class="headerlink" title="Getting Started"></a>Getting Started</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( <span class="keyword">output</span> one );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> one = <span class="number">1&#x27;b1</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="Output-Zero"><a href="#Output-Zero" class="headerlink" title="Output Zero"></a>Output Zero</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module ( <span class="keyword">output</span> zero );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> zero = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>



<h1 id="Verilog-Language"><a href="#Verilog-Language" class="headerlink" title="Verilog Language"></a>Verilog Language</h1><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><h3 id="Simple-wire"><a href="#Simple-wire" class="headerlink" title="Simple wire"></a>Simple wire</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( <span class="keyword">input</span> in, <span class="keyword">output</span> out );</span><br><span class="line">	<span class="keyword">assign</span> out = in;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Four-wires"><a href="#Four-wires" class="headerlink" title="Four wires"></a>Four wires</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module (</span><br><span class="line">	<span class="keyword">input</span> a,</span><br><span class="line">	<span class="keyword">input</span> b,</span><br><span class="line">	<span class="keyword">input</span> c,</span><br><span class="line">	<span class="keyword">output</span> w,</span><br><span class="line">	<span class="keyword">output</span> x,</span><br><span class="line">	<span class="keyword">output</span> y,</span><br><span class="line">	<span class="keyword">output</span> z  );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> w = a;</span><br><span class="line">	<span class="keyword">assign</span> x = b;</span><br><span class="line">	<span class="keyword">assign</span> y = b;</span><br><span class="line">	<span class="keyword">assign</span> z = c;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If we&#x27;re certain about the width of each signal, using </span></span><br><span class="line">	<span class="comment">// the concatenation operator is equivalent and shorter:</span></span><br><span class="line">	<span class="comment">// assign &#123;w,x,y,z&#125; = &#123;a,b,b,c&#125;;</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Inverter"><a href="#Inverter" class="headerlink" title="Inverter"></a>Inverter</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">	<span class="keyword">input</span> in,</span><br><span class="line">	<span class="keyword">output</span> out</span><br><span class="line">);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> out = ~in;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="AND-gate"><a href="#AND-gate" class="headerlink" title="AND gate"></a>AND gate</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> a, </span><br><span class="line">    <span class="keyword">input</span> b, </span><br><span class="line">    <span class="keyword">output</span> out );</span><br><span class="line">	<span class="keyword">assign</span> out = a &amp; b ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="NOR-gate"><a href="#NOR-gate" class="headerlink" title="NOR gate"></a>NOR gate</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> a, </span><br><span class="line">    <span class="keyword">input</span> b, </span><br><span class="line">    <span class="keyword">output</span> out );</span><br><span class="line">    <span class="keyword">assign</span> out = ! (a | b) ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="XNOR-gate"><a href="#XNOR-gate" class="headerlink" title="XNOR gate"></a>XNOR gate</h3><h3 id="Declaring-wires"><a href="#Declaring-wires" class="headerlink" title="Declaring wires"></a>Declaring wires</h3><h3 id="7458-chip"><a href="#7458-chip" class="headerlink" title="7458 chip"></a>7458 chip</h3><h2 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h2><h3 id="Vectors-1"><a href="#Vectors-1" class="headerlink" title="Vectors"></a>Vectors</h3><h2 id="More-Verilog-Features"><a href="#More-Verilog-Features" class="headerlink" title="More Verilog Features"></a>More Verilog Features</h2><h3 id="Combinational-for-loop-Vector-reversal-2"><a href="#Combinational-for-loop-Vector-reversal-2" class="headerlink" title="*Combinational for-loop : Vector reversal 2"></a>*Combinational for-loop : Vector reversal 2</h3><blockquote>
<p>Given a 100-bit input vector [99:0], reverse its bit ordering.</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// False Vesion</span></span><br><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">99</span>:<span class="number">0</span>] in ,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">99</span>:<span class="number">0</span>] out </span><br><span class="line">) ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">assign</span> out[i] = in [<span class="number">99</span> - i] ;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error (10170): Verilog HDL syntax error at top_module.v(6) near text: &quot;for&quot;;  expecting &quot;endmodule&quot;. </span><br></pre></td></tr></table></figure>
</blockquote>
<p>为什么是这样的报错呢？显示在for循环那一行前缺少一个endmodule</p>
<blockquote>
<p>在module内部，只能<strong>声明输入</strong>、<strong>输出端口、内部信号以及使用连续赋值</strong>（<code>assign</code> 语句）来描述硬件电路的连续逻辑</p>
</blockquote>
<p>因此，<code>verilog</code>编译器认为，<code>for</code>循环前应该有一个<code>endmodule</code>以结束该<code>module</code>,此后才能开始<code>for-loop</code>的声明。</p>
<p><strong>为什么Verilog规定Module内部不能声明for-loop?</strong></p>
<blockquote>
<p>当涉及到硬件描述语言（HDL）如Verilog时，有一些关键的设计原则和语法规则是不同于通用编程语言（如C、Python）的。</p>
<p>Verilog 是为硬件设计而设计的，其目的是描述硬件电路的结构和行为，而不是传统意义上的“编程”。在硬件电路中，信号是在不同的时间步长上并行计算的，而不是按顺序执行的像在软件中一样。这导致了一些语法规则的不同。</p>
<p>具体来说，以下是为什么在 Verilog 中不能直接将 <code>for</code> 循环放在模块内部的原因：</p>
<ol>
<li><strong>并行性：</strong> Verilog 中的代码被解释为电路，其中不同的信号在相同的时间步长上并行地计算。这与传统编程语言中的迭代循环不同，后者按顺序执行。在硬件电路中，不同的信号和逻辑是同时计算的，因此 <code>for</code> 循环的概念与硬件的并行性不一致。</li>
<li><strong>延迟和时间问题：</strong> 在 Verilog 中，信号的传播和逻辑运算都需要考虑时间延迟。循环的迭代次数可能需要在编译时已知，但在硬件中，延迟可能会影响电路的行为。如果允许在模块内部使用 <code>for</code> 循环，编译器就需要处理如何在时间上正确地展开循环和处理延迟的问题。</li>
</ol>
<p>为了符合硬件的特性，Verilog 引入了生成语句（generate statements），允许在编译时生成不同的硬件结构，这包括使用 <code>for</code> 循环来生成多个类似的硬件逻辑。生成语句允许在不同的时间步长上并行生成硬件，而不会引入运行时的顺序问题。</p>
</blockquote>
<p>简单说就是：<code>for-loop</code>内不同层次(i &#x3D; 1 , 2 ,3 ……)，体现了顺序的先后，是软件编程的思维；而<code>verilog</code>中<code>assign</code>描述的各硬件是并行运行的，是硬件编程的思维；二者需要区分开来:smile:</p>
<p>我们使用<code>generate</code>来实现(generate生成多个并行计算模块)：[generate介绍](<a href="https://zhuanlan.zhihu.com/p/107047600">Verilog中generate的使用 - 知乎 (zhihu.com)</a>)</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">99</span>:<span class="number">0</span>] in ,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">99</span>:<span class="number">0</span>] out </span><br><span class="line">) ;</span><br><span class="line">    <span class="keyword">genvar</span> i ;<span class="comment">//state a variable i </span></span><br><span class="line">    <span class="keyword">generate</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++) <span class="keyword">begin</span> : generate_name</span><br><span class="line">            <span class="keyword">assign</span> out[i] = in [<span class="number">99</span> - i] ; <span class="comment">// type of out is wire</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endgenerate</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<p>或者将<code>for-loop</code>写在<code>always</code>中：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">99</span>:<span class="number">0</span>] in ,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">99</span>:<span class="number">0</span>] out </span><br><span class="line">) ;</span><br><span class="line">    <span class="keyword">always</span> @(*)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">$bits</span>(out) ; i++ ) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//$bits(signal)获取信号位长</span></span><br><span class="line">            out[i] = in [ <span class="built_in">$bits</span>(out) - <span class="number">1</span> - i ] ; </span><br><span class="line">            <span class="comment">//type of out is reg</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="Combinational-for-loop-255-bit-population-count"><a href="#Combinational-for-loop-255-bit-population-count" class="headerlink" title="Combinational for-loop:255-bit population count"></a>Combinational for-loop:255-bit population count</h3><blockquote>
<p>A “population count” circuit counts the number of ‘1’s in an input vector. Build a population count circuit for a 255-bit input vector.</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">254</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] out );</span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">       out = <span class="number">0</span> ;<span class="comment">//寄存器型变量在always块中初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">255</span> ; i++) <span class="keyword">begin</span></span><br><span class="line">            out = out + in[i] ; </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Generate-for-loop-1000-bit-binary-adder-2"><a href="#Generate-for-loop-1000-bit-binary-adder-2" class="headerlink" title="Generate for-loop:1000-bit binary adder 2"></a>Generate for-loop:1000-bit binary adder 2</h3><blockquote>
<p>Create a 100-bit binary ripple-carry adder by instantiating 100 <a href="https://hdlbits.01xz.net/wiki/Fadd">full adders</a>. The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from <em>each</em> full adder in the ripple-carry adder. cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see.</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">99</span>:<span class="number">0</span>] a, b,</span><br><span class="line">    <span class="keyword">input</span> cin,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">99</span>:<span class="number">0</span>] cout,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">99</span>:<span class="number">0</span>] sum );</span><br><span class="line">	<span class="keyword">generate</span></span><br><span class="line">        <span class="keyword">genvar</span> i ;<span class="comment">//好像在for循环内声明genvar i 会报错</span></span><br><span class="line">        <span class="keyword">assign</span> sum[<span class="number">0</span>] = a[<span class="number">0</span>] ^ b[<span class="number">0</span>] ^ cin ;</span><br><span class="line">        <span class="keyword">assign</span> cout[<span class="number">0</span>] = a[<span class="number">0</span>] &amp; b[<span class="number">0</span>] | a[<span class="number">0</span>] &amp; cin | b[<span class="number">0</span>] &amp; cin ;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; <span class="number">100</span> ; i++) <span class="keyword">begin</span> : generate_name </span><br><span class="line">            <span class="keyword">assign</span> sum[i] = a[i] ^ b[i] ^ cout[i-<span class="number">1</span>] ;</span><br><span class="line">            <span class="keyword">assign</span> cout[i] = a[i] &amp; b[i] | a[i] &amp; cout[i-<span class="number">1</span>] | b[i] &amp; cout[i-<span class="number">1</span>] ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endgenerate</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Generate-for-loop-100-digit-BCD-adder"><a href="#Generate-for-loop-100-digit-BCD-adder" class="headerlink" title="*Generate for-loop:100-digit BCD adder"></a>*Generate for-loop:100-digit BCD adder</h3><blockquote>
<p>You are provided with a BCD one-digit adder named <code>bcd_fadd</code> that adds two BCD digits and carry-in, and produces a sum and carry-out.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module bcd_fadd (</span><br><span class="line">    input [3:0] a,</span><br><span class="line">    input [3:0] b,</span><br><span class="line">    input     cin,</span><br><span class="line">    output   cout,</span><br><span class="line">    output [3:0] sum );</span><br></pre></td></tr></table></figure>

<p>Instantiate 100 copies of <code>bcd_fadd</code> to create a 100-digit BCD ripple-carry adder. Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) and a carry-in to produce a 100-digit sum and carry out.</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//False Verion </span></span><br><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">399</span>:<span class="number">0</span>] a, b,</span><br><span class="line">    <span class="keyword">input</span> cin,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> cout,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">399</span>:<span class="number">0</span>] sum );</span><br><span class="line">    <span class="keyword">genvar</span> i , j ;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">99</span>:<span class="number">0</span>] temp_cout ;</span><br><span class="line">    <span class="keyword">assign</span> cout = temp_cout[<span class="number">99</span>] ;</span><br><span class="line">    <span class="keyword">generate</span></span><br><span class="line">        bcd_fadd U0( a[<span class="number">3</span>:<span class="number">0</span>] , b[<span class="number">3</span>:<span class="number">0</span>] , cin , temp_cout[<span class="number">0</span>] , sum[<span class="number">3</span>:<span class="number">0</span>]) ;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">7</span> , j = <span class="number">0</span>; i &lt; <span class="number">400</span> ;  i = i + <span class="number">4</span> , j++) <span class="keyword">begin</span> : name </span><br><span class="line">            bcd_fadd U1( a[i:i-<span class="number">3</span>] , b[i:i-<span class="number">3</span>] , temp_cout[j] , sum[i:i-<span class="number">3</span>]) ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endgenerate</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>报错信息：Error (10170): Verilog HDL syntax error at top_module.v(12) near text: “,”;  expecting “;”</p>
</blockquote>
<p>没有查到相关信息(先留一个坑)，猜测：<code>for-loop</code>中不能有两个<code>genvar</code>,于是不能出现<code>,</code> ,提示你要用<code>;</code></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Right Verion </span></span><br><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">399</span>:<span class="number">0</span>] a, b,</span><br><span class="line">    <span class="keyword">input</span> cin,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> cout,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">399</span>:<span class="number">0</span>] sum );</span><br><span class="line">    <span class="keyword">genvar</span> i ;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">99</span>:<span class="number">0</span>] temp_cout ;</span><br><span class="line">    <span class="keyword">assign</span> cout = temp_cout[<span class="number">99</span>] ;</span><br><span class="line">    <span class="keyword">generate</span></span><br><span class="line">        bcd_fadd U0( a[<span class="number">3</span>:<span class="number">0</span>] , b[<span class="number">3</span>:<span class="number">0</span>] , cin , temp_cout[<span class="number">0</span>] , sum[<span class="number">3</span>:<span class="number">0</span>]) ;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">7</span> ; i &lt; <span class="number">400</span> ;  i = i + <span class="number">4</span> ) <span class="keyword">begin</span> : name </span><br><span class="line">            bcd_fadd U1( a[i:i-<span class="number">3</span>] , b[i:i-<span class="number">3</span>] , temp_cout[(i + <span class="number">1</span>) / <span class="number">4</span> - <span class="number">2</span>] , temp_cout[(i + <span class="number">1</span>) / <span class="number">4</span> - <span class="number">1</span>] , sum[i:i-<span class="number">3</span>]) ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endgenerate</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<p><strong>此处实现一下<code>bcd_fadd</code></strong></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> bcd_fadd(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span> : <span class="number">0</span>] a , b ,</span><br><span class="line">    <span class="keyword">input</span> cin , </span><br><span class="line">    <span class="keyword">output</span> cout ,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] sum</span><br><span class="line">) ;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">4</span>:<span class="number">0</span>] temp ;</span><br><span class="line">    <span class="keyword">assign</span> temp = a + b + cin ;</span><br><span class="line">    <span class="keyword">assign</span> &#123;cout , sum&#125; = (temp&gt;<span class="number">9</span>) ? (temp+<span class="number">6</span>) : temp ; </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>



<h1 id="Circuits"><a href="#Circuits" class="headerlink" title="Circuits"></a>Circuits</h1><h2 id="Combinational-Logic"><a href="#Combinational-Logic" class="headerlink" title="Combinational Logic"></a>Combinational Logic</h2><h3 id="Basic-Gates"><a href="#Basic-Gates" class="headerlink" title="Basic Gates"></a>Basic Gates</h3><h4 id="Even-longer-vectors"><a href="#Even-longer-vectors" class="headerlink" title="Even longer vectors"></a>Even longer vectors</h4><blockquote>
<p>See also the shorter version: <a href="https://hdlbits.01xz.net/wiki/gatesv">Gates and vectors</a>.</p>
<p>You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour:</p>
<ul>
<li><strong>out_both</strong>: Each bit of this output vector should indicate whether <em>both</em> the corresponding input bit and its neighbour to the <strong>left</strong> are ‘1’. For example, <code>out_both[98]</code> should indicate if <code>in[98]</code> and <code>in[99]</code> are both 1. Since <code>in[99]</code> has no neighbour to the left, the answer is obvious so we don’t need to know <code>out_both[99]</code>.</li>
<li><strong>out_any</strong>: Each bit of this output vector should indicate whether <em>any</em> of the corresponding input bit and its neighbour to the <strong>right</strong> are ‘1’. For example, <code>out_any[2]</code> should indicate if either <code>in[2]</code> or <code>in[1]</code> are 1. Since <code>in[0]</code> has no neighbour to the right, the answer is obvious so we don’t need to know <code>out_any[0]</code>.</li>
<li><strong>out_different</strong>: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the <strong>left</strong>. For example, <code>out_different[98]</code> should indicate if <code>in[98]</code> is different from <code>in[99]</code>. For this part, treat the vector as wrapping around, so <code>in[99]</code>‘s neighbour to the left is <code>in[0]</code>.</li>
</ul>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//My vesion</span></span><br><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">99</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">98</span>:<span class="number">0</span>] out_both,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">99</span>:<span class="number">1</span>] out_any,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">99</span>:<span class="number">0</span>] out_different );</span><br><span class="line">    <span class="keyword">genvar</span> i ;</span><br><span class="line">	<span class="keyword">generate</span></span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span> ; i &lt; <span class="number">99</span> ; i++ ) <span class="keyword">begin</span> : generate_name</span><br><span class="line">            <span class="keyword">assign</span> out_both[i] = in[i] &amp; in[i+<span class="number">1</span>] ;</span><br><span class="line">            <span class="keyword">assign</span> out_any[i+<span class="number">1</span>]= in[i+<span class="number">1</span>] | in[i] ;</span><br><span class="line">            <span class="keyword">assign</span> out_different[i] = in[i] ^ in[i+<span class="number">1</span>] ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">assign</span> out_different[<span class="number">99</span>] = in[<span class="number">99</span>] ^ in[<span class="number">0</span>] ;</span><br><span class="line">    <span class="keyword">endgenerate</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Offical vesion</span></span><br><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">99</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">98</span>:<span class="number">0</span>] out_both,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">99</span>:<span class="number">1</span>] out_any,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">99</span>:<span class="number">0</span>] out_different );</span><br><span class="line">    <span class="keyword">assign</span> out_both = in[<span class="number">98</span>:<span class="number">0</span>] &amp; in[<span class="number">99</span>:<span class="number">1</span>] ;</span><br><span class="line">    <span class="keyword">assign</span> out_any  = in[<span class="number">99</span>:<span class="number">1</span>] | in[<span class="number">98</span>:<span class="number">0</span>] ;</span><br><span class="line">    <span class="keyword">assign</span> out_different = in ^ &#123; in[<span class="number">0</span>] , in[<span class="number">99</span>:<span class="number">1</span>] &#125; ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="Multiplexers"><a href="#Multiplexers" class="headerlink" title="Multiplexers"></a>Multiplexers</h3><h4 id="9-to-1-multiplexer"><a href="#9-to-1-multiplexer" class="headerlink" title="9-to-1 multiplexer"></a>9-to-1 multiplexer</h4><blockquote>
<p>Create a 16-bit wide, 9-to-1 multiplexer. sel&#x3D;0 chooses a, sel&#x3D;1 chooses b, etc. For the unused cases (sel&#x3D;9 to 15), set all output bits to ‘1’.</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Flase vesion</span></span><br><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>] a, b, c, d, e, f, g, h, i,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] sel,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>] out );</span><br><span class="line">    <span class="keyword">always</span> @(*)<span class="keyword">begin</span> </span><br><span class="line">    <span class="keyword">case</span>(sel)</span><br><span class="line">        <span class="number">4&#x27;b0000</span> : out = a ;</span><br><span class="line">        <span class="number">4&#x27;b0001</span> : out = b ;</span><br><span class="line">        <span class="number">4&#x27;b0010</span> : out = c ;</span><br><span class="line">        <span class="number">4&#x27;b0011</span> : out = d ;</span><br><span class="line">        <span class="number">4&#x27;b0100</span> : out = e ;</span><br><span class="line">        <span class="number">4&#x27;b0101</span> : out = f ;</span><br><span class="line">        <span class="number">4&#x27;b0110</span> : out = g ;</span><br><span class="line">        <span class="number">4&#x27;b0111</span> : out = h ;</span><br><span class="line">        <span class="number">4&#x27;b1000</span> : out = i ;</span><br><span class="line">     	<span class="keyword">default</span> : out = <span class="number">16&#x27;hFFFF</span> ;<span class="comment">//十六进制应该为4&#x27;hFFFF</span></span><br><span class="line">        <span class="comment">//踩过的坑 ： out = 1 ; out = 0xFFFF ; out = 4&#x27;hFFFF</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span>      </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>



<h4 id="256-to-1-4-bit-multiplexer"><a href="#256-to-1-4-bit-multiplexer" class="headerlink" title="256-to-1 4-bit multiplexer"></a>256-to-1 4-bit multiplexer</h4><blockquote>
<p>Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel&#x3D;0 should select bits <code>in[3:0]</code>, sel&#x3D;1 selects bits <code>in[7:4]</code>, sel&#x3D;2 selects bits <code>in[11:8]</code>, etc.</p>
</blockquote>
<blockquote>
<p>Hint</p>
<ul>
<li>With this many options, a case statement isn’t so useful.</li>
<li>Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It’s not always good at this. An error saying “… is not a constant” means it couldn’t prove that the select width is constant. In particular, <code>in[ sel*4+3 : sel*4 ]</code> does not work. &#x2F;&#x2F; verilog 索引不支持全为变量</li>
<li>Bit slicing (“Indexed vector part select”, since Verilog-2001) has an even more compact syntax.</li>
</ul>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1023</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] sel,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] out );</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">assign</span> out = in[sel * <span class="number">4</span> + <span class="number">3</span> : sel * <span class="number">4</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>error : sel is not a constant File ;</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//True</span></span><br><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1023</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] sel,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] out );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> out = in[sel * <span class="number">4</span>  +: <span class="number">4</span>] ;<span class="comment">//从sel*4向上四位</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Arithmetic-Circuits"><a href="#Arithmetic-Circuits" class="headerlink" title="Arithmetic Circuits"></a>Arithmetic Circuits</h3><h4 id="3-bit-binary-adder"><a href="#3-bit-binary-adder" class="headerlink" title="3-bit binary adder"></a>3-bit binary adder</h4><blockquote>
<p>Now that you know how to build a <a href="https://hdlbits.01xz.net/wiki/Fadd">full adder</a>, make 3 instances of it to create a 3-bit binary ripple-carry adder. The adder adds two 3-bit numbers and a carry-in to produce a 3-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from <em>each</em> full adder in the ripple-carry adder. cout[2] is the final carry-out from the last full adder, and is the carry-out you usually see.</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] a, b,</span><br><span class="line">    <span class="keyword">input</span> cin,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">2</span>:<span class="number">0</span>] cout,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">2</span>:<span class="number">0</span>] sum );</span><br><span class="line">    full_adder ripple_adder_1( a[<span class="number">0</span>] , b[<span class="number">0</span>] , cin , cout[<span class="number">0</span>] , sum[<span class="number">0</span>] ) ;</span><br><span class="line">    full_adder ripple_adder_2( a[<span class="number">1</span>] , b[<span class="number">1</span>] , cout[<span class="number">0</span>] , cout[<span class="number">1</span>] , sum[<span class="number">1</span>] ) ;</span><br><span class="line">    full_adder ripple_adder_3( a[<span class="number">2</span>] , b[<span class="number">2</span>] , cout[<span class="number">1</span>] , cout[<span class="number">2</span>] , sum[<span class="number">2</span>] ) ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> full_adder(</span><br><span class="line">    <span class="keyword">input</span> a , b , cin , </span><br><span class="line">    <span class="keyword">output</span> cout , sum</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">assign</span> cout= a &amp; b | a &amp; cin | b &amp; cin ;</span><br><span class="line">    <span class="keyword">assign</span> sum = a ^ b ^ cin ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h4 id="Signed-addition-overflow"><a href="#Signed-addition-overflow" class="headerlink" title="Signed addition overflow"></a>Signed addition overflow</h4><blockquote>
<p>Assume that you have two 8-bit 2’s complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Flase vesion</span></span><br><span class="line"><span class="keyword">module</span> top_module (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] a,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] b,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] s,</span><br><span class="line">    <span class="keyword">output</span> overflow</span><br><span class="line">); </span><br><span class="line">    <span class="keyword">assign</span> &#123; overflow , s &#125; = a + b ;</span><br><span class="line">    <span class="comment">//注意题中的signed overflow , 并不等于进位cout</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如何检测符号溢出(<strong>signed overflow</strong>) : 符号不同，相加不会溢出  ； 符号相同，可能溢出，需要设置检测。</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//True vesion</span></span><br><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] a , b ,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span> : <span class="number">0</span>] s ,</span><br><span class="line">    <span class="keyword">output</span> overflow</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">assign</span> s = a + b ;</span><br><span class="line">    <span class="keyword">assign</span> overflow = ( a[<span class="number">7</span>] == b[<span class="number">7</span>] ) ? (a[<span class="number">7</span>] ^ s[<span class="number">7</span>]) : <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h4 id="100-bit-binary-adder"><a href="#100-bit-binary-adder" class="headerlink" title="100-bit binary adder"></a>100-bit binary adder</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module (</span><br><span class="line">	<span class="keyword">input</span> [<span class="number">99</span>:<span class="number">0</span>] a,</span><br><span class="line">	<span class="keyword">input</span> [<span class="number">99</span>:<span class="number">0</span>] b,</span><br><span class="line">	<span class="keyword">input</span> cin,</span><br><span class="line">	<span class="keyword">output</span> cout,</span><br><span class="line">	<span class="keyword">output</span> [<span class="number">99</span>:<span class="number">0</span>] sum</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The concatenation &#123;cout, sum&#125; is a 101-bit vector.</span></span><br><span class="line">	<span class="keyword">assign</span> &#123;cout, sum&#125; = a+b+cin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-digit-BCD-adder"><a href="#4-digit-BCD-adder" class="headerlink" title="4-digit BCD adder"></a>4-digit BCD adder</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module ( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>] a, b,</span><br><span class="line">    <span class="keyword">input</span> cin,</span><br><span class="line">    <span class="keyword">output</span> cout,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">15</span>:<span class="number">0</span>] sum );</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] temp_cout ;</span><br><span class="line">    bcd_fadd U0 ( a[<span class="number">3</span>:<span class="number">0</span>] , b[<span class="number">3</span>:<span class="number">0</span>] , cin ,  temp_cout[<span class="number">0</span>] , sum[<span class="number">3</span>:<span class="number">0</span>] ) ;</span><br><span class="line">    bcd_fadd U1 ( a[<span class="number">7</span>:<span class="number">4</span>] , b[<span class="number">7</span>:<span class="number">4</span>] , temp_cout[<span class="number">0</span>] ,  temp_cout[<span class="number">1</span>] , sum[<span class="number">7</span>:<span class="number">4</span>] ) ;</span><br><span class="line">    bcd_fadd U2 ( a[<span class="number">11</span>:<span class="number">8</span>] , b[<span class="number">11</span>:<span class="number">8</span>] , temp_cout[<span class="number">1</span>] ,  temp_cout[<span class="number">2</span>] , sum[<span class="number">11</span>:<span class="number">8</span>] ) ;</span><br><span class="line">    bcd_fadd U3 ( a[<span class="number">15</span>:<span class="number">12</span>] , b[<span class="number">15</span>:<span class="number">12</span>] , temp_cout[<span class="number">2</span>] ,  cout , sum[<span class="number">15</span>:<span class="number">12</span>] ) ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Karnaugh-Map-to-Citcuit"><a href="#Karnaugh-Map-to-Citcuit" class="headerlink" title="Karnaugh Map to Citcuit"></a>Karnaugh Map to Citcuit</h3><h4 id="3-variable"><a href="#3-variable" class="headerlink" title="3-variable"></a>3-variable</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">	<span class="keyword">input</span> a, </span><br><span class="line">	<span class="keyword">input</span> b,</span><br><span class="line">	<span class="keyword">input</span> c,</span><br><span class="line">	<span class="keyword">output</span> out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// SOP form: Three prime implicants (1 term each), summed.</span></span><br><span class="line">	<span class="comment">// POS form: One prime implicant (of 3 terms)</span></span><br><span class="line">	<span class="comment">// In this particular case, the result is the same for both SOP and POS.</span></span><br><span class="line">    <span class="comment">// it&#x27;s easier by using SOP</span></span><br><span class="line">	<span class="keyword">assign</span> out = (a | b | c);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-variable"><a href="#4-variable" class="headerlink" title="4-variable"></a>4-variable</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> a,</span><br><span class="line">    <span class="keyword">input</span> b,</span><br><span class="line">    <span class="keyword">input</span> c,</span><br><span class="line">    <span class="keyword">input</span> d,</span><br><span class="line">    <span class="keyword">output</span> out  ); </span><br><span class="line">    <span class="keyword">assign</span> out = (!b &amp; !c) | (!a &amp; !d) | (!a &amp; b &amp; c) | (a &amp; c &amp; d)  ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-variable-1"><a href="#4-variable-1" class="headerlink" title="4-variable"></a>4-variable</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> a,</span><br><span class="line">    <span class="keyword">input</span> b,</span><br><span class="line">    <span class="keyword">input</span> c,</span><br><span class="line">    <span class="keyword">input</span> d,</span><br><span class="line">    <span class="keyword">output</span> out  ); </span><br><span class="line">    <span class="keyword">assign</span> out = a | (!b &amp; c) ;</span><br><span class="line">    <span class="comment">//用0去算！f更简单</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-variable-2"><a href="#4-variable-2" class="headerlink" title="4-variable"></a>4-variable</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Stupid vesion</span></span><br><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> a,</span><br><span class="line">    <span class="keyword">input</span> b,</span><br><span class="line">    <span class="keyword">input</span> c,</span><br><span class="line">    <span class="keyword">input</span> d,</span><br><span class="line">    <span class="keyword">output</span> out  ); </span><br><span class="line">    <span class="keyword">assign</span> out = (!a &amp; !b) &amp; (c ^ d) | (!a &amp; b) &amp; !(c ^ d) | a &amp; b &amp; (c ^ d) | (a &amp; !b) &amp; !(c ^ d);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wise vesion</span></span><br><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> a,</span><br><span class="line">    <span class="keyword">input</span> b,</span><br><span class="line">    <span class="keyword">input</span> c,</span><br><span class="line">    <span class="keyword">input</span> d,</span><br><span class="line">    <span class="keyword">output</span> out  ); </span><br><span class="line">	<span class="keyword">assign</span> out = a ^ b ^ c ^ d ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<p><strong>如果会奇偶校验便能一眼看出：<code>abcd</code>中有奇数个<code>1</code>，卡诺图为<code>1</code> .反之为<code>0</code>.</strong></p>
<h4 id="Minimum-SOP-and-POS"><a href="#Minimum-SOP-and-POS" class="headerlink" title="Minimum SOP and POS"></a>Minimum SOP and POS</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module (</span><br><span class="line">    <span class="keyword">input</span> a,</span><br><span class="line">    <span class="keyword">input</span> b,</span><br><span class="line">    <span class="keyword">input</span> c,</span><br><span class="line">    <span class="keyword">input</span> d,</span><br><span class="line">    <span class="keyword">output</span> out_sop,</span><br><span class="line">    <span class="keyword">output</span> out_pos</span><br><span class="line">); </span><br><span class="line">	<span class="keyword">assign</span> out_sop = c &amp; d | !a &amp; !b &amp; c ;</span><br><span class="line">    <span class="keyword">assign</span> out_pos = c &amp; (!a | b) &amp; (!b | d) ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h4 id="Karnaugh-map"><a href="#Karnaugh-map" class="headerlink" title="Karnaugh map"></a>Karnaugh map</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">1</span>] x, </span><br><span class="line">    <span class="keyword">output</span> f );</span><br><span class="line">    <span class="keyword">assign</span> f = !x[<span class="number">1</span>] &amp; x[<span class="number">3</span>] | x[<span class="number">1</span>] &amp; x[<span class="number">2</span>] &amp; !x[<span class="number">3</span>] ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Karnaugh-map-1"><a href="#Karnaugh-map-1" class="headerlink" title="Karnaugh map"></a>Karnaugh map</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">1</span>] x,</span><br><span class="line">    <span class="keyword">output</span> f</span><br><span class="line">); </span><br><span class="line">    <span class="keyword">assign</span> f = (x[<span class="number">3</span>] | !x[<span class="number">4</span>]) &amp; (!x[<span class="number">2</span>] | x[<span class="number">3</span>] | x[<span class="number">4</span>]) &amp; (!x[<span class="number">1</span>] | x[<span class="number">2</span>] | !x[<span class="number">4</span>]) &amp; (!x[<span class="number">1</span>] | !x[<span class="number">2</span>] | x[<span class="number">4</span>]) ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="K-map-implemented-with-a-multiplexer"><a href="#K-map-implemented-with-a-multiplexer" class="headerlink" title="K-map implemented with a multiplexer"></a>K-map implemented with a multiplexer</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module (</span><br><span class="line">    <span class="keyword">input</span> c,</span><br><span class="line">    <span class="keyword">input</span> d,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] mux_in</span><br><span class="line">); </span><br><span class="line">    <span class="keyword">always</span> @(*)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>( &#123; c , d &#125; )</span><br><span class="line">            <span class="number">2&#x27;b00</span> : mux_in = <span class="number">4&#x27;b0100</span> ;</span><br><span class="line">            <span class="number">2&#x27;b01</span> : mux_in = <span class="number">4&#x27;b0001</span> ;</span><br><span class="line">            <span class="number">2&#x27;b11</span> : mux_in = <span class="number">4&#x27;b1001</span> ;</span><br><span class="line">            <span class="number">2&#x27;b10</span> : mux_in = <span class="number">4&#x27;b0101</span> ;</span><br><span class="line">            <span class="keyword">default</span> : mux_in = <span class="number">4&#x27;b0000</span> ;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不完备 不一致 不可判定</p>
]]></content>
      <tags>
        <tag>IC</tag>
      </tags>
  </entry>
  <entry>
    <title>解决文章目录点击不跳转的问题</title>
    <url>/posts/6e206cd9/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p style = "color : green">网页文章目录罢工了？</p>

<p>今天在巡视我的小破站时，突然发现我的网页文章目录罢工了：点击目录文章不发生跳转。STFW找到了NexT主题下的一个2020年的<a href = "https://github.com/theme-next/hexo-theme-next/pull/1540/files">Issue</a> , 但我发现官方现在已经把这个bug修复了。之后我才找到原因：<strong>Hexo没有正确地渲染出我的markdown语法，或者说，我没有正确的书写markdown。</strong> <strong>将h标签写的标题改成markdown语法即可，即<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>改成<code>### 摘要</code></strong> </p>
<span id="more"></span>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><ul>
<li><strong>Bug复现</strong></li>
</ul>
<p>点击文章目录不跳转，打开开发者工具，发现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unchecked runtime.lastError: A listener indicated an asynchronous response by returning true, but the message channel closed before a response was received</span><br></pre></td></tr></table></figure>

<p>监听器确实监听到了一个response , 但 message channel在response接受前已关闭？不懂什么意思……</p>
<ul>
<li><strong>开发者模式Debug</strong></li>
</ul>
<p>打开开发者工具，选择一个元素进行检查，例如<code>摘要</code>，发现浏览器将其渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span> = <span class="string">&quot;nav-link&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span> = <span class="string">&quot;nav-number&quot;</span>&gt;</span>1.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span> = <span class="string">&quot;nav-text&quot;</span>&gt;</span>摘要<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong style = "color : red">这明显没设置锚点链接！！！怎么可能跳转！！！</strong></p>
<p>我又去看了下在建站初，Hexo自己给出的文章实例<code>Hello World</code>,检查<code>Quick Start</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span> = <span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span> = <span class="string">&quot;#Quick-Start&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span> = <span class="string">&quot;nav-number&quot;</span>&gt;</span>1.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span> = <span class="string">&quot;nav-text&quot;</span>&gt;</span>Quick Start<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>检查文章中的标题<code>Quick Start</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;Quick-Start&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#Quick-Start&quot;</span> <span class="attr">class</span>=<span class="string">&quot;headerlink&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Quick Start&quot;</span>&gt;</span></span><br><span class="line">		Quick Start</span><br><span class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现文章内的大标题都被加上了&#96;&#96;id&#96;锚点。而我写的文章都没有渲染加上锚点。</p>
<ul>
<li><strong>问题分析</strong></li>
</ul>
<p>同样是<code>_post</code>文件夹里的md文件，渲染结果却不同，问题肯定处在markdown文件内部，我仔细对比了官方参考的<code>Hello World</code>文章与我的文章，发现了问题所在：<strong style = "color:red">原来我的文章内的标题都是用HTML格式写的，而官方文章都是用markdown语法写的</strong>，即：</p>
<p>我的摘要：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;摘要&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<p>官方的摘要：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### 摘要</span></span><br></pre></td></tr></table></figure>

<p>markdown里写的是<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>,那hexo当然要原封不动地渲染为<code>&lt;h3&gt;摘要&lt;/h3&gt;</code> , 难不成还修改你的HTML代码？	被自己傻到了:sweat_smile:</p>
<ul>
<li><strong>解决方案</strong></li>
</ul>
<p>把markdown源文件修改即可，即<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>改成<code>### 摘要</code></p>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/posts/a91eaa72/</url>
    <content><![CDATA[<p>Git学习笔记 by 《<a href="https://git-scm.com/book/zh/v2">ProGit</a>》</p>
<span id="more"></span>

<h1 id="Git设计理念"><a href="#Git设计理念" class="headerlink" title="Git设计理念"></a>Git设计理念</h1><ul>
<li><p><strong>Git直接记录快照，而非差异比较</strong></p>
</li>
<li><p>基于差异(Delta-based)** , 像CSV、Subversion、Perforce。它们如何建立新版本：在版本1的基础上，建立一个记录<code>版本2(新版本)</code>与&#96;&#96;版本1&#96;差异的文件，我们称其为$\Delta1$ .当我们需要读取版本2时，可以通过**$版本1 + \Delta1$** 计算得出版本2。</p>
</li>
<li><p>Git快照流<strong>，提交后，建立一个新的快照：对</strong>修改过的文件<strong>建立一个新的快照并保存其索引，对</strong>未修改的文件<strong>并不重新存储，而是只</strong>保留一个链接**指向旧文件</p>
</li>
</ul>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://git-scm.com/book/en/v2/images/deltas.png" alt="基于差异比较"></div><div class="group-picture-column"><img src="https://git-scm.com/book/en/v2/images/snapshots.png" alt="数据流-快照"></div></div></div>

<h1 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h1><h2 id="Git工作状态"><a href="#Git工作状态" class="headerlink" title="Git工作状态"></a>Git工作状态</h2><p><strong>三种状态：</strong><code>已提交(committed)</code>、<code>已修改(modified)</code>、<code>已暂存(staged) </code>, 对应三个阶段：<code>工作区</code>、<code>暂存区</code>、<code>Git目录(仓库)</code>。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://git-scm.com/book/en/v2/images/areas.png" alt="Git三个阶段"></div><div class="group-picture-column"><img src="https://git-scm.com/book/en/v2/images/lifecycle.png" alt="文件状态变化周期"></div></div></div>

<h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>安装Git后添加用户信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;benkangpeng&quot;</span><br><span class="line">git config --global user.email benkangpeng@163.com</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /c/user/my_project</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init <span class="comment"># 初始化git</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h2><h3 id="获取mannul"><a href="#获取mannul" class="headerlink" title="获取mannul"></a>获取mannul</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git &lt;verb&gt; -h</span><br></pre></td></tr></table></figure>

<p>ex :  <code>git add -h</code></p>
<h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /my_project/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br></pre></td></tr></table></figure>

<p>初始化Git仓库，此时会在my_project文件夹中生成<code>.git</code>子目录用于存放版本控制文件。注意：<strong>此时还没对项目文件进行跟踪</strong> , 还需要<code>git add</code>跟踪所需文件。</p>
<p>git add</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git *.c  <span class="comment"># 跟踪所有后缀为.c文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git README.md</span></span><br></pre></td></tr></table></figure>

<p><code>git add</code>内涵：</p>
<p>要暂存这次更新，需要运行 <code>git add</code> 命令。 这是个<strong>多功能</strong>命令：①可以用它开始跟踪新文件，②或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“<u>精确地将内容添加到<strong>下一次提交</strong>中</u>”而不是“将一个文件添加到项目中”要更加合适。 </p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>显示当前文件夹git状况。</p>
<blockquote>
<p>On branch master</p>
<p>No commits yet</p>
<p>Changes to be committed:<br>  (use “git rm –cached <file>…” to unstage)<br>        new file:   README.md</p>
<p>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)<br>        CONTRIBUTING.md</p>
</blockquote>
<p>如上显示的是，<code>README.md</code>已被跟踪，而<code>CONTRIBUTING.md</code>未被跟踪。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add CONTRIBUTING.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> `My project` &gt; README.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>On branch master</p>
<p>No commits yet</p>
<p>Changes to be committed:<br>  (use “git rm –cached <file>…” to unstage)<br>        new file:   CONTRIBUTING.md<br>        new file:   README.md</p>
<p>Changes not staged for commit:<br>  (use “git add <file>…” to update what will be committed)<br>  (use “git restore <file>…” to discard changes in working directory)<br>        modified:   README.md</p>
</blockquote>
<ul>
<li>此时<code>CONTRIBUTING.md</code>已经被跟踪</li>
<li>提示有<code>待提交的修改</code> (changes to be committed) ,  <code>CONTRIBUTING.md</code>和<code>README.md</code>没有提交。(至于changes , 即<code>new file</code> , git将<code>创立文件</code>也视为<code>changes</code>)</li>
<li><code>Changes not staged for commit</code> ： 我们刚才向<code>README,md</code>写入了<code>My project</code> , 但没有将新版本的<code>README.md</code>添加进入暂存区<code>stage</code> 。可执行操作<code>git add README.md</code></li>
<li>上面这条再一次体现了<code>git add</code>的双重命令，或将其理解为<code>为文件提交(commit)做好预备</code></li>
</ul>
<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>创建<code>.gitignore</code>文件忽略追踪</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> .gitignore</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .gitignore</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You must add .gitignore into the staging area to make it work .</span></span><br></pre></td></tr></table></figure>

<p>常见语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 忽略所有的 .a 文件</span><br><span class="line">*.a</span><br><span class="line"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span><br><span class="line">!lib.a</span><br><span class="line"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># 忽略任何目录下名为 build 的文件夹</span><br><span class="line">build/</span><br><span class="line"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure>

<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><ul>
<li><p><code>git diff</code> 查看<strong>同一</strong>文件<code>已暂存</code>与<code>未暂存</code>的两个版本的差异</p>
<p>eg.  在<code>README.md</code>中添加一行<code>哈哈</code> ，no stage ,  使用命令查看:</p>
</li>
</ul>
<blockquote>
<p>$ git diff README.md<br>diff –git a&#x2F;README.md b&#x2F;README.md<br>index 6fcadd0..b2f8c83 100644<br>— a&#x2F;README.md<br>+++ b&#x2F;README.md<br>@@ -1 +1,3 @@<br>My project~<br>+<br>+哈哈<br>\ No newline at end of file</p>
</blockquote>
<ul>
<li><code>git diff --staged</code> 查看<code>已暂存文件</code>与<code>最后一次提交文件</code>的差异.</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --staged README.md</span></span><br></pre></td></tr></table></figure>



<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>每次准备提交前，先用 <code>git status</code> 看下，你所需要的文件是不是都<strong>已暂存</strong>起来了， 然后再运行提交命令 <code>git commit</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;the first commit&quot;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>-m</code> : 添加提交信息message</p>
</li>
<li><p>“the first commit” : 提交的信息，区分每一次提交做了哪些大体的修改</p>
</li>
<li><p><code>git commit -a</code>跳过暂存区，直接将为暂存的文件commit .</p>
</li>
</ul>
<h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><ul>
<li>如果你想从磁盘根本删除<code>未暂存的文件</code>:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> PROJECT.md</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从暂存区删除(取消跟踪)文件(仍保存在磁盘里）：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> -f PROJECT.md <span class="comment">#-force , 强制删除</span></span></span><br></pre></td></tr></table></figure>

<h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><ul>
<li><code>git mv</code> 移动文件 or 重命名文件。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">mv</span> Project.md PROJECT.md</span></span><br></pre></td></tr></table></figure>

<p>上述命令相当于：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> Project.md PROJECT.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> Project.md <span class="comment"># 从暂存区移除Project.md</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add PROJECT.md <span class="comment"># 跟踪PROJECT.md</span></span></span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><ul>
<li><code>git log</code> 显示所有提交日志</li>
<li><code>git log -2</code> 显示最近两条日志</li>
<li><code>git log -p</code> 按补丁格式显示每个提交引入的差异</li>
<li><code>git log --pretty=oneline</code>显示格式为一行</li>
<li>此外还有一些参数过滤日志内容，例如<code>--since``--author</code>等，可查文档。</li>
</ul>
<h3 id="git-commit-–amend"><a href="#git-commit-–amend" class="headerlink" title="git commit –amend"></a>git commit –amend</h3><ul>
<li>提交后发现上一次提交有些许瑕疵，例如message写错了、没有跟踪上某个文件 ，但又不想再一次提交，想覆盖上一次提交。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend -m <span class="string">&quot;the right message&quot;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><ul>
<li>强制重置(删除)某个commit, 例如<code>git reset --hard HEAD~1</code>删除上一次提交。</li>
<li>取消暂存的文件，例如将<code>CONTRIBUTING.md</code>文件取出&#96;&#96;stageing area<code>,</code>git reset HEAD CONTRIBUTING.md&#96;</li>
</ul>
<h3 id="文件版本回溯"><a href="#文件版本回溯" class="headerlink" title="*文件版本回溯"></a>*文件版本回溯</h3><p>案例：<code>commit log</code>如下，自从<code>git clone</code>以来，我提交了<code>version 1</code>和<code>version2</code>.整个项目只有两个文件：<code>check.md</code>和<code>README.md</code>. 我现在想将<code>check.md</code>还原到<code>version 1</code>的状态，但<code>README.md</code>不用还原。(可以理解为我后知后觉意识到<code>version2</code>中对<code>check.md</code>的修改是错误的。)</p>
<blockquote>
<p>$ git log –pretty&#x3D;oneline<br>bc03ee1185c084b514ff44a9520ab5d29777b600 (HEAD) version2<br>3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1<br>86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin&#x2F;main, origin&#x2F;HEAD) colle<br>ct some ways to github<br>1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push<br>a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset 3d44a  <span class="comment"># 3d44a是version1的效验码，没写完整</span></span></span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       README.md</span><br><span class="line">M       check.md</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">到version1后,本地文件是没有发生变化的(仍是version2的snapshot),因此会提示`unstaged changes</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">HEAD detached from 86d413d</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   README.md</span><br><span class="line">        modified:   check.md</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何恢复check.md，上面的信息也提示我们了“git restore &lt;file&gt;”</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git restore check.md &amp;&amp; git add README.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 (HEAD) version 1</span><br><span class="line">86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle</span><br><span class="line">ct some ways to github</span><br><span class="line">1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push</span><br><span class="line">a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">END</span></span><br></pre></td></tr></table></figure>

<p><del>但以上做法删除了version2的提交信息。是否存在方法，只进行单个文件的版本回溯呢？现在还没解决……</del></p>
<h3 id="单文件版本回溯"><a href="#单文件版本回溯" class="headerlink" title="*单文件版本回溯"></a>*单文件版本回溯</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">05bfc3c25ca3ee80247f3ec24b4936d2d7e7d2c1 (HEAD) version3</span><br><span class="line">245a8ddd0c2bfc01c2444930e2ed11b04320d354 version2</span><br><span class="line">3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1</span><br><span class="line">86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle</span><br><span class="line">ct some ways to github</span><br><span class="line">1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push</span><br><span class="line">a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</span><br></pre></td></tr></table></figure>

<ul>
<li>将<code>check.md</code>回溯到版本1，其他文件不变，<code>git checkout &lt;hash&gt; check.md</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout 3d44a28a check.md</span></span><br><span class="line">Updated 1 path from aab7394</span><br></pre></td></tr></table></figure>

<h3 id="与远程仓库联动"><a href="#与远程仓库联动" class="headerlink" title="与远程仓库联动"></a>与远程仓库联动</h3><ul>
<li><code>git remote add &lt;name&gt; &lt;url&gt;</code> 添加远程仓库，例如<code>git remote add getback https://github.com/BenkangPeng/GetBack.git</code> , 之后可用名称<code>getback</code>代替网址进行操作。类似于<code>C</code>里的<code>#define</code></li>
<li><code>git remote -v</code>显示已添加的远程仓库, <code>git remote</code>简略显示。</li>
<li><code>git remote rename name1 name2</code> 修改仓库<strong>代称</strong>，实际远程仓库(比如Github上的仓库）名称没被修改。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add getback https://github.com/BenkangPeng/GetBack.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">getback https://github.com/BenkangPeng/GetBack.git (fetch)</span><br><span class="line">getback https://github.com/BenkangPeng/GetBack.git (push)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote rename getback GetBack</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line">GetBack</span><br></pre></td></tr></table></figure>

<ul>
<li><code>git fetch</code> 获取仓库的更新。例如，你在1年以前<code>clone</code>了仓库<code>A</code> , 但在过去一年内，仓库<code>A</code>其他开源贡献者提交了许多内容，甚至产生了分支，<code>git fetch &lt;url&gt;</code>将仓库<code>A</code>的这些更新数据下载到本地，但不会改变本地状态：<strong>不会自动合并分支或修改你当前的工作</strong>。当然你可以手动合并分支、更新本地仓库。</li>
<li><code>git clone &lt;url&gt;</code>克隆仓库。将<code>&lt;url&gt;</code>对应的仓库克隆到本地，与<code>git fetch</code>不同的是，它将覆盖本地工作。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/BenkangPeng/GetBack.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> GetBack/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">origin  https://github.com/BenkangPeng/GetBack.git (fetch)</span><br><span class="line">origin  https://github.com/BenkangPeng/GetBack.git (push)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">克隆完仓库后，git会自动创建一个origin的远程仓库，对应的就是克隆的仓库url</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对GetBack进行修改……</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin main</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将本地的main分支(主支)提交到远程仓库origin</span></span><br></pre></td></tr></table></figure>

<p>关于<code>主分支</code> <code>master</code>改为<code>main</code>，还颇有意味。<a href="https://github.com/github/renaming">github&#x2F;renaming</a>        <a href="https://zhuanlan.zhihu.com/p/257179306">乐子 on 知乎</a></p>
<h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><ul>
<li><code>git tag -a &lt;v1.0&gt; -m &quot;version 1.0&quot;</code> 添加<code>annotated tag</code> , <code>git tag v1.0</code>添加<code>lightweight</code>标签。</li>
<li><code>git tag</code>显示所有标签，<code>git show &lt;v1.0&gt; </code>显示某个标签信息</li>
<li><code>git tag &lt;version&gt; &lt;verify code&gt;</code>为之前某一次<code>commit</code>补充<code>tag</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">dd0a36aec54a58a9f3427f5f33b1ee97802949b0 (HEAD -&gt; master, tag: v1.0) </span><br><span class="line">3d4057629e1e3515667c7e826817a9ab5a29f306 the second commit</span><br><span class="line">349775b9754e9113e549a9d734707bff38f2e3b4 the first commit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag v0.0 34977</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认情况下，<code>git push</code>不会顺带将每一个<code>commit</code> 的<code>tag</code>提交，需手动设置。<code>git push origin &lt;tagname&gt;</code>上传单个<code>tag</code>  ,  <code>git push origin --tags </code>推送所有<code>tags</code></li>
<li><code>git tag -d &lt;tagname&gt;</code>删除标签，但不会删除远程仓库(&#96;&#96;remote<code>)的</code>tags<code> , 需用</code>git push origin –delete <tagname>&#96;</li>
</ul>
<h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch testing	<span class="comment">#创立分支testing</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout testing  <span class="comment">#切换到testing</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以上两条命令可合并为 git checkout -b testing</span> </span><br><span class="line">Switched to branch &#x27;testing&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">do</span> some changes</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout main  <span class="comment">#回到主分支</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch <span class="comment">#显示所有分支</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>git merge &lt;branch&gt;</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">touch</span> polynorminal.cpp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edit polynorminal.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add polynorminal.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;touch a new .cpp file&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b AddFunc2</span></span><br><span class="line">Switched to a new branch &#x27;AddFunc2&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edit polynorminal.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="string">&quot;have added the func2&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout main</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge AddFunc2</span></span><br><span class="line">Updating 87ba74e..869b2a7</span><br><span class="line">Fast-forward</span><br><span class="line"> polynorminal.cpp | 11 ++++++++++-</span><br><span class="line"> 1 file changed, 10 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<div class="note info"><p>在<code>main</code>中合并分支时，可能出现合并冲突，这是因为分支中文件修改过大，<code>git</code>不知道如何将<code>main</code>与<code>branch</code>两个文件版本合并，此时需手动合并、修改文件，并<code>commit</code></p>
</div>

<ul>
<li><code>git branch -d &lt;branch&gt;</code>删除分支（但不能删除未合并的分支）</li>
<li><code>git branch --no-merged</code>查看未合并的分支</li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo-NexT</title>
    <url>/posts/b3bdf13b/</url>
    <content><![CDATA[<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p><strong style="color : rgb(128,109,158) ; font-size : 24px">Hello Hexo and NexT !</strong></p>
<p><strong style = "color : rgb(128,109,158) ; font-size : 24px"> Hexo and NexT yyds ! </strong></p>
<p>基于Hexo和NexT主题，我的第一个个人网站诞生啦！</p>
<p>这篇文章记录了建立网站的点点滴滴，并持续更新我对心肝宝贝<a href="https://benkangpeng.github.io/">My Website</a>的持续美化、修缮。</p>
<span id="more"></span>

<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>Hexo对中文的支持十分友好：<a href="https://hexo.io/zh-cn/">Hexo</a>  ,   直接按照<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>进行即可。</p>
<h4 id="1-安装前提"><a href="#1-安装前提" class="headerlink" title="1. 安装前提"></a>1. 安装前提</h4><p>首先确保计算机上已经安装<a href="https://nodejs.org/en">Node.js</a> 和<a href="https://git-scm.com/download/win">Git</a>。进不去网站的话，安装包已经屯好了：<a href="https://pan.baidu.com/s/1fJ36mQkLS5qLYJSBXTeb0g?pwd=91bs">百度网盘</a>   <a href="https://pbk.lanzoum.com/i0b4O19nlu3i">蓝奏云</a></p>
<h4 id="2-建立Hexo初始网站"><a href="#2-建立Hexo初始网站" class="headerlink" title="2. 建立Hexo初始网站"></a>2. 建立Hexo初始网站</h4><ul>
<li><strong>安装Hexo(任意位置)</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>建立一个文件夹存放所有博客文件：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/d/Hexo</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>在&#x2F;d&#x2F;Hexo文件夹使用如下方法创建一个blog(可修改名称) , 并进入：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init blog</span></span><br><span class="line"></span><br><span class="line">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ./blog/</span></span><br></pre></td></tr></table></figure>

<p>blog文件夹内存放的就是网站blog源文件,如果想再建立一个网站，同样在Hexo文件夹下使用<code>hexo init blog_2</code>创建blog_2文件夹……</p>
<ul>
<li><strong>在blog文件夹中加入hexo相关配置：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查看网页</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g &amp;&amp; hexo s  <span class="comment"># 完整写法： hexo generate &amp;&amp; hexo server</span></span></span><br></pre></td></tr></table></figure>

<p>进入INFO中的端口<code>http://localhost:4000/</code>即可看到hexo博客框架:</p>
<div style = "display : flex ; align-items : center ; justify-content: center;">
    <img src="https://pic.imgdb.cn/item/650fe8a2c458853aef63bf52.jpg" alt = "hexo初始网页.jpg" style = "width : 80% ">
</div>
* **写文章**

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new <span class="string">&quot;第一篇文章&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>Hexo即在<code>/blog/source/_posts/</code>创建了一个<code>第一篇文章.md</code> 。</p>
<p>实时编辑，在<code>https://localhost:4000</code>端口中刷新便可实时显示。</p>
<p>设置hexo主题</p>
<p>我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。更多主题可在<a href="https://hexo.io/themes/">Themes | Hexo</a>找到。</p>
<h3 id="配置NexT主题"><a href="#配置NexT主题" class="headerlink" title="配置NexT主题"></a>配置NexT主题</h3><p>我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。</p>
<p>Next的最新官网是<a href="https://theme-next.js.org/">NexT - Theme for Hexo (theme-next.js.org)</a> ， 而不是<a href="https://theme-next.org/">Home Page | Theme-Next</a> ， 原因详见：<a href="https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848">Issue</a></p>
<ul>
<li><strong>安装NexT</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-theme-next</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>配置网站</strong></li>
</ul>
<p>你会发现文件中有两个配置文件，在blog中有一个<code>_config.yml</code> ， 即Hexo的配置文件 ， <code>\Hexo\blog_test\node_modules\hexo-theme-next</code>中有一个<code>_config.yml</code> ， 即NexT主题的配置文件。</p>
<blockquote>
<p>However, we do not recommend directly modifying the NexT config file. It is quite often running into conflict status when updating NexT theme via <code>git pull</code>, or need to merge configurations manually when upgrading to new releases. For the theme installed through npm, it is also difficult to modify the NexT config file in <code>node_modules</code>.</p>
</blockquote>
<p>In order to resolve this issue, we recommend using the <a href="https://theme-next.js.org/docs/getting-started/configuration">Alternate Theme Config</a> feature to configure theme NexT.</p>
<p>官网提示我们，在修改NexT配置文件时不要直接修改 <code>\Hexo\blog_test\node_modules\hexo-theme-next</code> ， 否则可能引起冲突。官方提供给我们一个方法<a href="https://theme-next.js.org/docs/getting-started/configuration">Alternate Theme Config</a> ， 简而言之将 <code>\Hexo\blog_test\node_modules\hexo-theme-next\_config.yml</code>复制到<code>blog\</code>下，更名为<code>_config.next.yml</code> , 这样直接修改<code>blog\</code>下的两个配置文件即可对Hexo和NexT均进行配置。</p>
<p>可手动配置，也可在相应位置执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Hexo Configuration</strong></li>
</ul>
<p>Edit <code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Benkang</span> <span class="string">Peng</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;Personal Website&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Benkang</span> <span class="string">Peng</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># theme: landscape  记得修改主题为NexT</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>NexT Configuration</strong></li>
</ul>
<p>Edit：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">minify:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Configuring Favicon</strong></li>
</ul>
<p>We can visit <a href="https://www.logosc.cn/logo/favicon">Favicon.ico图标生成器</a> to generate our favicon by inputting characters .</p>
<p>Put  the favicon files in <code>Hexo\blog_test\node_modules\hexo-theme-next\source\images</code> , then edit <code>NexT config file </code> according to the filename:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line">  <span class="comment">#safari_pinned_tab: /images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Also add the avatar :</strong></li>
</ul>
<p>For example , I add <code>GNU-Linux-Logo-Penguin-SVG.jpg</code> to <code>Hexo\blog_test\node_modules\hexo-theme-next\source\images</code></p>
<p>Edit <code>_config.next.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/GNU-Linux-Logo-Penguin-SVG.jpg</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Configuring Menu</strong></li>
</ul>
<p>We can add the <code>Menu items </code> by removing the comments in <code>_config.next.yml</code> :</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-pie-chart</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<p>Menu settings item’s format :  <code>key: /link/ || icon</code> .    <code>Key</code> is the name of menu items(home , tags , etc.) ,  and link is the target link to relative url inside your site .  For example , if the menu item is <code>other: /other/ || icon</code> , it will go to <code>https://benkangpeng.github.io/other/</code> when you click it . </p>
<blockquote>
<p>Except home and archives, all custom pages under menu section need to be created manually.</p>
</blockquote>
<p>Tips above means that , when you add new menu items , you should also create relative files except <code>home and archives</code> as they can create relative files automatically .</p>
<p>For example , three steps to add menu item <code>tags</code> :</p>
<p><strong>①Removing the comment of tags :</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-pie-chart</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br></pre></td></tr></table></figure>

<p><strong>②Create relative files :</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure>

<p><strong>③Editting the markdown file <code>index.md</code> of <code>\blog_test\source\tags\</code></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2023-09-18 09:10:10</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>

<p>That’s all .  As for the ways of the offical doc ,  I’m  absolutely confused ……</p>
<h3 id="Beautify"><a href="#Beautify" class="headerlink" title="Beautify"></a>Beautify</h3><h4 id="Custom-pages"><a href="#Custom-pages" class="headerlink" title="Custom pages"></a>Custom pages</h4><p>If we want to add a <code>.html</code> to the website and don’t want NexT to influence that <code>.html</code> ‘ s style , which means <code>.html</code> can be displayed on its own style ,  how do we do ?</p>
<p>The answer is : <strong>Prevent Hexo from rendering my .html files.</strong></p>
<ul>
<li>Now create a new page :</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page Other</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Edit the <code>_config.next.yml</code> to display <code>Other</code> in menu</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Other:</span> <span class="string">/other/index.html</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-external-link</span></span><br></pre></td></tr></table></figure>

<p>Find the name of  font-awesome icons from <a href="https://fontawesome.dashgame.com/">Font Awesome</a></p>
<ul>
<li>Edit the <code>_config.yml</code> to make sure folder <code>/Other</code> cann’t be rendered by Hexo .</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;Other/**&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Delete the <code>index.md</code> in <code>/source/Other</code> , and create <code>index.html</code></li>
</ul>
<p>We can write something in <code>index.html</code> , which will keep its style and not be rendered by hexo .</p>
<h4 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h4><p>It’s a common need to show some part of article in home page and a <code>Read more</code> button to view more .</p>
<p>The best way is : Use <code>&lt;!-- more --&gt;</code> in the article to break the article manually .</p>
<h4 id="Post-Wordcount"><a href="#Post-Wordcount" class="headerlink" title="Post Wordcount"></a>Post Wordcount</h4><p>Install plugin <code>hexo-word-counter</code> :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-word-counter</span></span><br></pre></td></tr></table></figure>

<p>Edit <code>_config.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span>    </span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Tag-Icon"><a href="#Tag-Icon" class="headerlink" title="Tag Icon"></a>Tag Icon</h4><p>By default, tags at the bottom of posts have a symbol # at there left side.</p>
<p>If you prefer icon instead of symbol, edit <code>_config.next.yml</code> like following:</p>
<h4 id="Codeblock-Style"><a href="#Codeblock-Style" class="headerlink" title="Codeblock Style"></a>Codeblock Style</h4><p>You can go to <a href="https://theme-next.js.org/highlight/">Highlight (theme-next.js.org)</a> to choose the theme you like and it will give the way to edit the <code>.yml</code> .</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">atom-one-dark</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">atom-one-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br><span class="line">  <span class="comment"># Fold code block</span></span><br><span class="line">  <span class="attr">fold:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure>



<h4 id="Back-To-Top"><a href="#Back-To-Top" class="headerlink" title="Back To Top"></a>Back To Top</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="Reading-Progress"><a href="#Reading-Progress" class="headerlink" title="Reading Progress"></a>Reading Progress</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">start_at:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>

<h4 id="GitHub-Banner"><a href="#GitHub-Banner" class="headerlink" title="GitHub Banner"></a>GitHub Banner</h4><p>NexT provide <code>Follow me on GitHub</code> banner on the right-top corner .</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/benkangpeng</span></span><br></pre></td></tr></table></figure>



<h3 id="Tag-Plugin"><a href="#Tag-Plugin" class="headerlink" title="Tag Plugin"></a>Tag Plugin</h3><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><p>NexT provide the tag plugin <code>button</code> , which can jump to corresponding link .</p>
<ul>
<li><strong>Usage</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% button url , text , icon[class] , [title] %&#125;</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li><code>url</code> : Absolute or relative path to URL.</li>
<li><code>text</code> : Button text. Required if no icon specified.</li>
<li><code>icon</code> : Font Awesome icon name. Required if no text specified.</li>
<li><code>[class]</code> : <em>Optional parameter.</em> Font Awesome class(es): <code>fa-fw</code> | <code>fa-lg</code> | <code>fa-2x</code> | <code>fa-3x</code> | <code>fa-4x</code> | <code>fa-5x</code></li>
<li><code>[title]</code> : <em>Optional parameter.</em> Tooltip at mouseover.</li>
</ul>
</li>
</ul>
<p>eg.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn # , Text , home , mouseover %&#125;&#123;% btn # , Superpowers , fa fa-external-link , mouseon %&#125;</span><br></pre></td></tr></table></figure>

<a class="btn" href="# " title="mouseover"><i class="fa fa-home"></i>Text</a><a class="btn" href="# " title="mouseon"><i class="fa-superpowers"></i>Superpowers</a>

<div style = "display : flex ; align-items : center ; justify-content: center;"><a class="btn" href="https://github.com" title="GitHub"><i class="fab fa-github fa-fw fa-lg"></i>GitHub</a></div>

<ul>
<li><strong>We can also use <code>Button</code> inside text , for example :</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For search engineer , I prefer &#123;% btn https://cn.bing.com , Bing , fa fa-search , Bing %&#125; instead of &#123;% btn https://baidu.com , Baidu , fa fa-bomb , Baidu %&#125;</span><br></pre></td></tr></table></figure>

<p>For search engineer , I prefer <a class="btn" href="https://cn.bing.com " title="Bing"><i class="fa fa-search"></i>Bing</a> instead of <a class="btn" href="https://baidu.com " title="Baidu"><i class="fa fa-bomb"></i>Baidu</a>.</p>
<ul>
<li><p><strong>Button margin</strong></p>
<p>Well , maybe this feature is useful for me to build a aggregation of commonly used website .</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style = &quot;display : flex ; align-items : center ; justify-content : center&quot;&gt;</span><br><span class="line">		&lt;div&gt;&#123;% btn #,, heading %&#125;&#123;% btn #,, fab fa-edge %&#125;&#123;% btn #,, times %&#125;&#123;% btn #,, circle-notch %&#125;&lt;/div&gt;</span><br><span class="line">		&lt;div&gt;&#123;% btn #,, italic %&#125;&#123;% btn #,, fab fa-scribd %&#125;&lt;/div&gt;</span><br><span class="line">		&lt;div&gt;&#123;% btn #,, fab fa-google %&#125;&#123;% btn #,, fab fa-chrome %&#125;&#123;% btn #,, fab fa-opera %&#125;&#123;% btn #,, gem</span><br><span class="line">			fa-rotate-270 %&#125;&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div style = "display : flex ; align-items : center ; justify-content : center">
        <div><a class="btn" href="#"><i class="fa fa-heading"></i></a><a class="btn" href="#"><i class="fab fa-edge"></i></a><a class="btn" href="#"><i class="fa fa-times"></i></a><a class="btn" href="#"><i class="fa fa-circle-notch"></i></a></div>
        <div><a class="btn" href="#"><i class="fa fa-italic"></i></a><a class="btn" href="#"><i class="fab fa-scribd"></i></a></div>
        <div><a class="btn" href="#"><i class="fab fa-google"></i></a><a class="btn" href="#"><i class="fab fa-chrome"></i></a><a class="btn" href="#"><i class="fab fa-opera"></i></a><a class="btn" href="#"><i class="fa fa-gem fa-rotate-270"></i></a></div>
    </div>



<h4 id="Group-Pictures"><a href="#Group-Pictures" class="headerlink" title="Group Pictures"></a>Group Pictures</h4><p><code>Group Pictures</code> is also an awesome plugin ! Maybe I will use <code>group picture</code> to build my photo repo .</p>
<ul>
<li>Usage</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% gp [number]-[layout] %&#125;</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>

<p><code>[number]</code> : optional . Total number of pictures .</p>
<p><code>[layout]</code> : optional . The index of the layout, which can be obtained according to the figure below. For example, if you want to apply the second layout to 4 pictures, then use .</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% grouppicture 4-2 %&#125;&#123;% endgrouppicture %&#125;</span><br></pre></td></tr></table></figure>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://theme-next.js.org/images/group-picture-1.png" alt="group-picture-1.png"></div><div class="group-picture-column"><img src="https://theme-next.js.org/images/group-picture-2.png" alt="group-picture-2.png"></div></div></div>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg" alt="NEXT.jpg"></div><div class="group-picture-column"><img src="https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg" alt="NEXT.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg" alt="NEXT.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column"><img src="https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg" alt="NEXT.jpg"></div><div class="group-picture-column"><img src="https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg" alt="NEXT.jpg"></div></div></div>

<div class="note info"><p>It’s recommended to enable <code>fancybox</code> before using <code>group pictures</code> .</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</div>



<h4 id="Link-Grid"><a href="#Link-Grid" class="headerlink" title="Link Grid"></a>Link Grid</h4><p><code>Link Grid</code> is simple to <code>group pictures</code> , which may be called “Group Links” . It may be really awesome to code a page containing some commonly used links by <code>link grid</code> , I think .</p>
<ul>
<li>Usage</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% lg [image] [delimiter] [comment] %&#125;</span><br><span class="line">&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>

<p><code>[image]</code> : Optional parameter. Default image URL.<br><code>[delimiter]</code> : Optional parameter. If the optional delimiter parameter is given, it is interpreted as the delimiter of items in each line.<br><code>[comment]</code> : Optional parameter. If the optional comment parameter is given, it is interpreted as the symbol to comment out a line.</p>
<p><code>&#123;% lg [image]  %&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% lg %&#125;</span><br><span class="line">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class="line">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class="line">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class="line">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class="line">&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>

<p>Well , maybe I get in trouble …… I can’t add the code above here , otherwise there are many bugs after running <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> .  But in other file , such as <code>External-link</code> in menu ,  it works .I can’t solve this problem ……</p>
<h4 id="Mermaid-WaveDrom"><a href="#Mermaid-WaveDrom" class="headerlink" title="Mermaid &amp; WaveDrom"></a>Mermaid &amp; WaveDrom</h4><p>Two plugins above is useful for flow chart painting .</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ul>
<li><strong>Settings</strong></li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NexT config file</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Usage</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Content</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<p><code>[class]</code> : Optional . Supported values : <code>default</code> | <code>primary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code> </p>
<p><code>[no-icon]</code> : Optional . Disable icon in note .</p>
<p><code>[summary]</code> : Optional . Summary of note .</p>
<ul>
<li><strong>Examples</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note %&#125;</span><br><span class="line">without define class style</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note "><p>without define class style</p>
</div>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default style</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note default"><p>default style</p>
</div>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">#### Primary Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note primary"><h4 id="Primary-Header"><a href="#Primary-Header" class="headerlink" title="Primary Header"></a>Primary Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">#### Info Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><h4 id="Info-Header"><a href="#Info-Header" class="headerlink" title="Info Header"></a>Info Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">#### Success Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><h4 id="Success-Header"><a href="#Success-Header" class="headerlink" title="Success Header"></a>Success Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">#### Danger Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger"><h4 id="Danger-Header"><a href="#Danger-Header" class="headerlink" title="Danger Header"></a>Danger Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">#### No icon note</span><br><span class="line">Note **without** icon: `note info no-icon`</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><h4 id="No-icon-note"><a href="#No-icon-note" class="headerlink" title="No icon note"></a>No icon note</h4><p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>
</div>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note primary This is a summary %&#125;</span><br><span class="line">#### Details and summary</span><br><span class="line">Note with summary: `note primary This is a summary`</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<details class="note primary"><summary><p>This is a summary</p>
</summary>
<h4 id="Details-and-summary"><a href="#Details-and-summary" class="headerlink" title="Details and summary"></a>Details and summary</h4><p>Note with summary: <code>note primary This is a summary</code></p>

</details>

<h4 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h4><p>NexT also provide the <code>PDF</code> plugin which can add the pdf viewer in the website .</p>
<h3 id="Third-Party-Plugins"><a href="#Third-Party-Plugins" class="headerlink" title="Third Party Plugins"></a>Third Party Plugins</h3><h4 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h4><blockquote>
<blockquote>
<p>Easily enable fast AJAX navigation on any website (using pushState() + XHR)</p>
</blockquote>
<p>Pjax is <strong>a standalone JavaScript module</strong> that uses <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX">AJAX</a> (XmlHttpRequest) and <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">pushState()</a> to deliver a fast browsing experience.</p>
<p><em>It allows you to completely transform the user experience of standard websites (server-side generated or static ones) to make users feel like they are browsing an app, especially for those with low bandwidth connections.</em></p>
<p><strong>No more full page reloads. No more multiple HTTP requests.</strong></p>
<p><em>Pjax does not rely on other libraries, like jQuery or similar. It is written entirely in vanilla JS.</em></p>
</blockquote>
<p><code>&quot;Make users feel like they are browsing an app&quot; </code> ?  True or False ?  Unbelievable !</p>
<p>Just Edit in <code>_config.next.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="Math-Equations"><a href="#Math-Equations" class="headerlink" title="Math Equations"></a>Math Equations</h4><p>NexT also provide some plugins to render math equations . As I don’t plan to write math notes on my blog (It’s convient to write them in LaTex , isn’t it ?) , so maybe next time !</p>
<h4 id="Lazyload"><a href="#Lazyload" class="headerlink" title="Lazyload"></a>Lazyload</h4><p>It delays loading of images in long web pages. Images outside of viewport will not be loaded before user scrolls to them. </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h4><p>NexT provide the animation behavoir . But for me , it’s unnecessary , and I can close animation function to speed my website .</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="comment"># All available transition variants: https://theme-next.js.org/animate/</span></span><br><span class="line">    <span class="attr">menu_item:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">post_block:</span> <span class="string">fadeIn</span></span><br><span class="line">    <span class="attr">post_header:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">post_body:</span> <span class="string">fadeInDown</span></span><br><span class="line">    <span class="attr">coll_header:</span> <span class="string">fadeInLeft</span></span><br><span class="line">    <span class="comment"># Only for Pisces | Gemini.</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="string">fadeInUp</span></span><br></pre></td></tr></table></figure>

<h4 id="Quicklink"><a href="#Quicklink" class="headerlink" title="Quicklink"></a>Quicklink</h4><p><a href="https://github.com/GoogleChromeLabs/quicklink">Quicklink</a> is a JavaScript plugin that faster subsequent page-loads by prefetching in-viewport links during idle time. Chrome, Firefox, Edge are supported without polyfills.</p>
<p>You can enable it by setting value <code>quicklink.enable</code> to <code>true</code> in NexT config file.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Home page and archive page can be controlled through home and archive options below.</span></span><br><span class="line">  <span class="comment"># This configuration item is independent of `enable`.</span></span><br><span class="line">  <span class="attr">home:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archive:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">Me:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="comment"># &quot;Me&quot; is a menu item I add .</span></span><br><span class="line">  <span class="comment"># Default (true) will initialize quicklink after the load event fires.</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Custom a time in milliseconds by which the browser must execute prefetching.</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="AddToAny"><a href="#AddToAny" class="headerlink" title="AddToAny"></a>AddToAny</h4><p>Share your artical to external patform by <code>AddToAny</code> .</p>
<p>On my view , it’s useless ………</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># AddToAny Share. See: https://www.addtoany.com</span></span><br><span class="line"><span class="attr">addtoany:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">buttons:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">wechat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">facebook</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">twitter</span></span><br></pre></td></tr></table></figure>

<h4 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h4><p>Plugin <code>hexo-generator-searchdb</code> provide our website with a local search engineer .</p>
<ul>
<li>Installation</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-searchdb</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Edit in <code>_config.yml</code></li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Edit in <code>_config.next.yml</code></li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p><strong style="color : orange ; font-size : 30px">All right , it’s all about Hexo beautifying !</strong></p>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Instruction Of Typora</title>
    <url>/posts/bfc69175/</url>
    <content><![CDATA[<p>Typora是一个基于markdown语法的轻量级软件，以下是我在学习markdown语法时的一些笔记。</p>

<span id="more"></span>

<p><a href="https://pan.baidu.com/s/1A0PSXm8SgOlyFYxgQ7yaDg?pwd=jwuf#list/path=%2F">Typora软件分享</a>提取码：jwuf</p>
<h3 id="Living-preview"><a href="#Living-preview" class="headerlink" title="Living preview"></a>Living preview</h3><p>Living preview(实时预览)这也算是Typora的一个特点吧相当于有道云笔记中的右窗口预览，<strong>可自动隐去格式说明中的格式语句</strong> 。 注意一定要在符号与正文之间<strong>加空格</strong>，目的在于区分内容与格式符。文字换行也与一般不同，要<strong>先加空格再enter</strong>。</p>
<h3 id="具体符号"><a href="#具体符号" class="headerlink" title="具体符号"></a>具体符号</h3><h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><p>随着标题的井字符数量的增加，标题优先级逐渐下降。</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 大标题  （ Ctrl + 1 ） </span><br><span class="line">## 第二号标题 （ Ctrl + 2 ) </span><br><span class="line">### 第三号标题  </span><br><span class="line">一直可以到第六号标题</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="Blockquote"><a href="#Blockquote" class="headerlink" title="Blockquote"></a>Blockquote</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法 ： &gt; 引用内容  </span><br><span class="line">例如输入下列语句：</span><br><span class="line">&gt; 心志要坚，意趣要乐。  </span><br><span class="line">输出结果为</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>心志要坚，意趣要乐</p>
</blockquote>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">就如平常一样输入序号就行了，此后换行就会自动排序。  </span><br><span class="line">格式 ：1. 第一点        </span><br><span class="line">2. 第二点</span><br><span class="line">3. * 空圆</span><br><span class="line">   - 方形</span><br><span class="line">* 实圆</span><br></pre></td></tr></table></figure>
</blockquote>
<ol>
<li>第一点</li>
<li>第二点</li>
<li><ul>
<li><h2 id="星号"><a href="#星号" class="headerlink" title="星号"></a>星号</h2></li>
</ul>
</li>
</ol>
<p>- </p>
<h4 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式 </span><br><span class="line">- [ ] 未完成任务    - [x] 已完成任务</span><br><span class="line">可点击任务点完成任务  </span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>未完成任务    </li>
<li>已完成任务</li>
</ul>
<h4 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式  </span><br><span class="line">​```language</span><br><span class="line">代码段</span><br><span class="line">​```  </span><br><span class="line">其实后面那三个顿号电脑会自动显示的（注意是顿号，  </span><br><span class="line">英文输入法下的Esc下边那个键）  </span><br><span class="line">代码段也有一个神奇的功能，就是能完整显示Typora的代码符，   </span><br><span class="line">要不然本文的一个个事例又是怎么保留住这些Typora符呢。想想也知道，  </span><br><span class="line">设计一个这样的文本格式，  </span><br><span class="line">当然也要兼顾代码的特殊符号呀，比如代码里的#、*是不能参与Typora的格式符的。  </span><br><span class="line">代码语句的输入  </span><br><span class="line">格式 </span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Reverse Bits Ordering</span><br><span class="line">module top_module(</span><br><span class="line">    input [99:0] in ,</span><br><span class="line">    output [99:0] out </span><br><span class="line">) ;</span><br><span class="line">    genvar i ;</span><br><span class="line">    generate</span><br><span class="line">        for(i = 0 ; i &lt; 100 ; i++) begin : generate_name</span><br><span class="line">            assign out[i] = in [99 - i] ;</span><br><span class="line">        end</span><br><span class="line">    endgenerate</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>

<h4 id="Math-Blocks"><a href="#Math-Blocks" class="headerlink" title="Math Blocks"></a>Math Blocks</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ 单行输入 $</span><br><span class="line">$ \mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125;</span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;  </span><br><span class="line">$</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| A  | B |</span><br><span class="line">| C  | D |</span><br><span class="line">| E  | F |  </span><br><span class="line">点击表格内有功能选择</span><br></pre></td></tr></table></figure>
</blockquote>
<table>
<thead>
<tr>
<th align="center">A</th>
<th align="center">B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">C</td>
<td align="center">D</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">F</td>
</tr>
</tbody></table>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式 </span><br><span class="line">--- </span><br><span class="line">或者 </span><br><span class="line">*** </span><br><span class="line">例如 </span><br><span class="line">我是分割线 </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">我是分割线 </span><br><span class="line"></span><br><span class="line">***</span><br></pre></td></tr></table></figure>
</blockquote>
<p>我是分割线 </p>
<hr>
<p>我是分割线 </p>
<hr>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式 </span><br><span class="line">输入[toc]再回车就行了 （table of content) </span><br><span class="line">就会生成一个目录，点击相应标记即可跳转 </span><br><span class="line">例如 </span><br><span class="line">[toc] </span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式 </span><br><span class="line">[给链接起个名字](写上具体网址)</span><br><span class="line">[知乎](https://www.zhihu.com/) 注意用英文输入法下的括号  </span><br><span class="line">在markdown文件中按住Ctrl键同时点击网址即可直接打开</span><br></pre></td></tr></table></figure>
</blockquote>
<p><a href="www.zhihu.com">知乎</a></p>
<h4 id="Insert-Pictures"><a href="#Insert-Pictures" class="headerlink" title="Insert Pictures"></a>Insert Pictures</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式  </span><br><span class="line">![起个名字](存储位置) </span><br><span class="line">例如 </span><br><span class="line">![思维导图](D:\desktop\Typora.png) </span><br><span class="line">当然啦，直接把图片拖过来复制一下不香吗</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>可将typora设置如下，可避免图片丢失导致markdown文件中图片无法查看（也可以使用网络图床存储）</p>
<p><img src="file://D:/Software/Typora/Pictures/1693142385073.png?lastModify=1695005959" alt="img"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Software</tag>
      </tags>
  </entry>
</search>
